# Generated by Django 5.2.1 on 2025-08-16 11:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('full_name', models.CharField(max_length=100)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=50)),
                ('country', models.CharField(blank=True, max_length=50)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='student_profiles/')),
                ('education_level', models.CharField(blank=True, choices=[('high_school', 'High School'), ('bachelors', "Bachelor's Degree"), ('masters', "Master's Degree"), ('phd', 'PhD'), ('other', 'Other')], max_length=20)),
                ('institution', models.CharField(blank=True, max_length=200)),
                ('field_of_study', models.CharField(blank=True, max_length=200)),
                ('enrollment_number', models.CharField(blank=True, max_length=100, null=True)),
                ('graduation_year', models.PositiveIntegerField(blank=True, null=True)),
                ('gpa', models.FloatField(blank=True, null=True)),
                ('skills', models.JSONField(blank=True, default=list)),
                ('interests', models.JSONField(blank=True, default=list)),
                ('employment_status', models.CharField(blank=True, choices=[('student', 'Full-time Student'), ('employed', 'Employed'), ('self_employed', 'Self Employed'), ('unemployed', 'Looking for Opportunities'), ('other', 'Other')], max_length=20)),
                ('current_job_title', models.CharField(blank=True, max_length=200)),
                ('company', models.CharField(blank=True, max_length=200)),
                ('career_goals', models.TextField(blank=True)),
                ('completed_courses_count', models.PositiveIntegerField(default=0)),
                ('current_courses_count', models.PositiveIntegerField(default=0)),
                ('attendance_percentage', models.FloatField(default=0.0)),
                ('completed_assignments', models.PositiveIntegerField(default=0)),
                ('certificates', models.JSONField(blank=True, default=list)),
                ('average_course_rating', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('linkedin_profile', models.URLField(blank=True)),
                ('github_profile', models.URLField(blank=True)),
                ('portfolio_website', models.URLField(blank=True)),
                ('social_links', models.JSONField(blank=True, default=dict)),
                ('preferred_learning_time', models.JSONField(blank=True, default=list)),
                ('notification_preferences', models.JSONField(blank=True, default=dict)),
                ('language_preferences', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('full_name', models.CharField(max_length=100)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('city', models.CharField(blank=True, max_length=50)),
                ('country', models.CharField(blank=True, max_length=50)),
                ('bio', models.TextField(blank=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='teacher_profiles/')),
                ('employee_id', models.CharField(blank=True, max_length=100, null=True)),
                ('headline', models.CharField(blank=True, max_length=200, null=True)),
                ('expertise_areas', models.JSONField(default=list)),
                ('expertise_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('expert', 'Expert'), ('master', 'Master')], default='expert', max_length=20)),
                ('years_of_experience', models.PositiveIntegerField(default=0)),
                ('employment_type', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('contract', 'Contract'), ('freelance', 'Freelance')], default='part_time', max_length=20)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('resume', models.FileField(blank=True, null=True, upload_to='teacher_documents/resumes/')),
                ('degree_certificates', models.FileField(blank=True, null=True, upload_to='teacher_documents/degrees/')),
                ('id_proof', models.FileField(blank=True, null=True, upload_to='teacher_documents/id_proofs/')),
                ('education', models.JSONField(default=list)),
                ('certifications', models.JSONField(default=list)),
                ('awards', models.JSONField(default=list)),
                ('publications', models.JSONField(default=list)),
                ('total_courses', models.PositiveIntegerField(default=0)),
                ('total_students', models.PositiveIntegerField(default=0)),
                ('average_rating', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('teaching_style', models.TextField(blank=True)),
                ('languages_spoken', models.JSONField(default=list)),
                ('linkedin_profile', models.URLField(blank=True)),
                ('github_profile', models.URLField(blank=True)),
                ('personal_website', models.URLField(blank=True)),
                ('youtube_channel', models.URLField(blank=True)),
                ('social_links', models.JSONField(blank=True, default=dict)),
                ('availability_schedule', models.JSONField(default=dict)),
                ('preferred_teaching_methods', models.JSONField(default=list)),
                ('course_categories', models.JSONField(default=list)),
                ('notification_preferences', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('rejection_reason', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('total_course_hours', models.PositiveIntegerField(default=0)),
                ('total_students_helped', models.PositiveIntegerField(default=0)),
                ('response_rate', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('average_response_time', models.DurationField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('user', 'User'), ('student', 'Student'), ('teacher', 'Teacher'), ('admin', 'Admin'), ('subadmin', 'SubAdmin')], default='user', max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_token', models.CharField(blank=True, max_length=100, null=True)),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('city', models.CharField(blank=True, max_length=50)),
                ('country', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
